{"ast":null,"code":"\"use strict\";\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst express = require('express');\n\nconst logger = require('morgan');\n\nconst cors = require('cors');\n\nconst compression = require('compression');\n\nconst errorhandler = require('errorhandler');\n\nconst bodyParser = require('./body-parser');\n\nmodule.exports = function (opts) {\n  const userDir = path.join(process.cwd(), 'public');\n  const defaultDir = path.join(__dirname, '../../public');\n  const staticDir = fs.existsSync(userDir) ? userDir : defaultDir;\n  opts = Object.assign({\n    logger: true,\n    static: staticDir\n  }, opts);\n  const arr = []; // Compress all requests\n\n  if (!opts.noGzip) {\n    arr.push(compression());\n  } // Enable CORS for all the requests, including static files\n\n\n  if (!opts.noCors) {\n    arr.push(cors({\n      origin: true,\n      credentials: true\n    }));\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // only use in development\n    arr.push(errorhandler());\n  } // Serve static files\n\n\n  arr.push(express.static(opts.static)); // Logger\n\n  if (opts.logger) {\n    arr.push(logger('dev', {\n      skip: req => process.env.NODE_ENV === 'test' || req.path === '/favicon.ico'\n    }));\n  } // No cache for IE\n  // https://support.microsoft.com/en-us/kb/234067\n\n\n  arr.push((req, res, next) => {\n    res.header('Cache-Control', 'no-cache');\n    res.header('Pragma', 'no-cache');\n    res.header('Expires', '-1');\n    next();\n  }); // Read-only\n\n  if (opts.readOnly) {\n    arr.push((req, res, next) => {\n      if (req.method === 'GET') {\n        next(); // Continue\n      } else {\n        res.sendStatus(403); // Forbidden\n      }\n    });\n  } // Add middlewares\n\n\n  if (opts.bodyParser) {\n    arr.push(bodyParser);\n  }\n\n  return arr;\n};","map":{"version":3,"sources":["/Users/sherifbutt/Library/Mobile Documents/com~apple~CloudDocs/WORK/learning code/js/react/react-task-tracker/node_modules/json-server/lib/server/defaults.js"],"names":["fs","require","path","express","logger","cors","compression","errorhandler","bodyParser","module","exports","opts","userDir","join","process","cwd","defaultDir","__dirname","staticDir","existsSync","Object","assign","static","arr","noGzip","push","noCors","origin","credentials","env","NODE_ENV","skip","req","res","next","header","readOnly","method","sendStatus"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst express = require('express');\n\nconst logger = require('morgan');\n\nconst cors = require('cors');\n\nconst compression = require('compression');\n\nconst errorhandler = require('errorhandler');\n\nconst bodyParser = require('./body-parser');\n\nmodule.exports = function (opts) {\n  const userDir = path.join(process.cwd(), 'public');\n  const defaultDir = path.join(__dirname, '../../public');\n  const staticDir = fs.existsSync(userDir) ? userDir : defaultDir;\n  opts = Object.assign({\n    logger: true,\n    static: staticDir\n  }, opts);\n  const arr = []; // Compress all requests\n\n  if (!opts.noGzip) {\n    arr.push(compression());\n  } // Enable CORS for all the requests, including static files\n\n\n  if (!opts.noCors) {\n    arr.push(cors({\n      origin: true,\n      credentials: true\n    }));\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // only use in development\n    arr.push(errorhandler());\n  } // Serve static files\n\n\n  arr.push(express.static(opts.static)); // Logger\n\n  if (opts.logger) {\n    arr.push(logger('dev', {\n      skip: req => process.env.NODE_ENV === 'test' || req.path === '/favicon.ico'\n    }));\n  } // No cache for IE\n  // https://support.microsoft.com/en-us/kb/234067\n\n\n  arr.push((req, res, next) => {\n    res.header('Cache-Control', 'no-cache');\n    res.header('Pragma', 'no-cache');\n    res.header('Expires', '-1');\n    next();\n  }); // Read-only\n\n  if (opts.readOnly) {\n    arr.push((req, res, next) => {\n      if (req.method === 'GET') {\n        next(); // Continue\n      } else {\n        res.sendStatus(403); // Forbidden\n      }\n    });\n  } // Add middlewares\n\n\n  if (opts.bodyParser) {\n    arr.push(bodyParser);\n  }\n\n  return arr;\n};"]},"metadata":{},"sourceType":"script"}