{"ast":null,"code":"/*!\n * errorhandler\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\n\nvar escapeHtml = require('escape-html');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar util = require('util');\n/**\n * Module variables.\n * @private\n */\n\n\nvar DOUBLE_SPACE_REGEXP = /\\x20{2}/g;\nvar NEW_LINE_REGEXP = /\\n/g;\nvar STYLESHEET = fs.readFileSync(path.join(__dirname, '/public/style.css'), 'utf8');\nvar TEMPLATE = fs.readFileSync(path.join(__dirname, '/public/error.html'), 'utf8');\nvar inspect = util.inspect;\nvar toString = Object.prototype.toString;\n/* istanbul ignore next */\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n/**\n * Error handler:\n *\n * Development error handler, providing stack traces\n * and error message responses for requests accepting text, html,\n * or json.\n *\n * Text:\n *\n *   By default, and when _text/plain_ is accepted a simple stack trace\n *   or error message will be returned.\n *\n * JSON:\n *\n *   When _application/json_ is accepted, connect will respond with\n *   an object in the form of `{ \"error\": error }`.\n *\n * HTML:\n *\n *   When accepted connect will output a nice html stack trace.\n *\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function errorHandler(options) {\n  // get environment\n  var env = process.env.NODE_ENV || 'development'; // get options\n\n  var opts = options || {}; // get log option\n\n  var log = opts.log === undefined ? env !== 'test' : opts.log;\n\n  if (typeof log !== 'function' && typeof log !== 'boolean') {\n    throw new TypeError('option log must be function or boolean');\n  } // default logging using console.error\n\n\n  if (log === true) {\n    log = logerror;\n  }\n\n  return function errorHandler(err, req, res, next) {\n    // respect err.statusCode\n    if (err.statusCode) {\n      res.statusCode = err.statusCode;\n    } // respect err.status\n\n\n    if (err.status) {\n      res.statusCode = err.status;\n    } // default status code to 500\n\n\n    if (res.statusCode < 400) {\n      res.statusCode = 500;\n    } // log the error\n\n\n    var str = stringify(err);\n\n    if (log) {\n      defer(log, err, str, req, res);\n    } // cannot actually respond\n\n\n    if (res._header) {\n      return req.socket.destroy();\n    } // negotiate\n\n\n    var accept = accepts(req);\n    var type = accept.type('html', 'json', 'text'); // Security header for content sniffing\n\n    res.setHeader('X-Content-Type-Options', 'nosniff'); // html\n\n    if (type === 'html') {\n      var isInspect = !err.stack && String(err) === toString.call(err);\n      var errorHtml = !isInspect ? escapeHtmlBlock(str.split('\\n', 1)[0] || 'Error') : 'Error';\n      var stack = !isInspect ? String(str).split('\\n').slice(1) : [str];\n      var stackHtml = stack.map(function (v) {\n        return '<li>' + escapeHtmlBlock(v) + '</li>';\n      }).join('');\n      var body = TEMPLATE.replace('{style}', STYLESHEET).replace('{stack}', stackHtml).replace('{title}', escapeHtml(exports.title)).replace('{statusCode}', res.statusCode).replace(/\\{error\\}/g, errorHtml);\n      res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.end(body); // json\n    } else if (type === 'json') {\n      var error = {\n        message: err.message,\n        stack: err.stack\n      };\n\n      for (var prop in err) error[prop] = err[prop];\n\n      var json = JSON.stringify({\n        error: error\n      }, null, 2);\n      res.setHeader('Content-Type', 'application/json; charset=utf-8');\n      res.end(json); // plain text\n    } else {\n      res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n      res.end(str);\n    }\n  };\n};\n/**\n * Template title, framework authors may override this value.\n */\n\n\nexports.title = 'Connect';\n/**\n * Escape a block of HTML, preserving whitespace.\n * @api private\n */\n\nfunction escapeHtmlBlock(str) {\n  return escapeHtml(str).replace(DOUBLE_SPACE_REGEXP, ' &nbsp;').replace(NEW_LINE_REGEXP, '<br>');\n}\n/**\n * Stringify a value.\n * @api private\n */\n\n\nfunction stringify(val) {\n  var stack = val.stack;\n\n  if (stack) {\n    return String(stack);\n  }\n\n  var str = String(val);\n  return str === toString.call(val) ? inspect(val) : str;\n}\n/**\n * Log error to console.\n * @api private\n */\n\n\nfunction logerror(err, str) {\n  console.error(str || err.stack);\n}","map":{"version":3,"sources":["/Users/sherifbutt/Library/Mobile Documents/com~apple~CloudDocs/WORK/learning code/js/react/react-task-tracker/node_modules/errorhandler/index.js"],"names":["accepts","require","escapeHtml","fs","path","util","DOUBLE_SPACE_REGEXP","NEW_LINE_REGEXP","STYLESHEET","readFileSync","join","__dirname","TEMPLATE","inspect","toString","Object","prototype","defer","setImmediate","fn","process","nextTick","bind","apply","arguments","exports","module","errorHandler","options","env","NODE_ENV","opts","log","undefined","TypeError","logerror","err","req","res","next","statusCode","status","str","stringify","_header","socket","destroy","accept","type","setHeader","isInspect","stack","String","call","errorHtml","escapeHtmlBlock","split","slice","stackHtml","map","v","body","replace","title","end","error","message","prop","json","JSON","val","console"],"mappings":"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","sourcesContent":["/*!\n * errorhandler\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts')\nvar escapeHtml = require('escape-html')\nvar fs = require('fs')\nvar path = require('path')\nvar util = require('util')\n\n/**\n * Module variables.\n * @private\n */\n\nvar DOUBLE_SPACE_REGEXP = /\\x20{2}/g\nvar NEW_LINE_REGEXP = /\\n/g\nvar STYLESHEET = fs.readFileSync(path.join(__dirname, '/public/style.css'), 'utf8')\nvar TEMPLATE = fs.readFileSync(path.join(__dirname, '/public/error.html'), 'utf8')\nvar inspect = util.inspect\nvar toString = Object.prototype.toString\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Error handler:\n *\n * Development error handler, providing stack traces\n * and error message responses for requests accepting text, html,\n * or json.\n *\n * Text:\n *\n *   By default, and when _text/plain_ is accepted a simple stack trace\n *   or error message will be returned.\n *\n * JSON:\n *\n *   When _application/json_ is accepted, connect will respond with\n *   an object in the form of `{ \"error\": error }`.\n *\n * HTML:\n *\n *   When accepted connect will output a nice html stack trace.\n *\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function errorHandler (options) {\n  // get environment\n  var env = process.env.NODE_ENV || 'development'\n\n  // get options\n  var opts = options || {}\n\n  // get log option\n  var log = opts.log === undefined\n    ? env !== 'test'\n    : opts.log\n\n  if (typeof log !== 'function' && typeof log !== 'boolean') {\n    throw new TypeError('option log must be function or boolean')\n  }\n\n  // default logging using console.error\n  if (log === true) {\n    log = logerror\n  }\n\n  return function errorHandler (err, req, res, next) {\n    // respect err.statusCode\n    if (err.statusCode) {\n      res.statusCode = err.statusCode\n    }\n\n    // respect err.status\n    if (err.status) {\n      res.statusCode = err.status\n    }\n\n    // default status code to 500\n    if (res.statusCode < 400) {\n      res.statusCode = 500\n    }\n\n    // log the error\n    var str = stringify(err)\n    if (log) {\n      defer(log, err, str, req, res)\n    }\n\n    // cannot actually respond\n    if (res._header) {\n      return req.socket.destroy()\n    }\n\n    // negotiate\n    var accept = accepts(req)\n    var type = accept.type('html', 'json', 'text')\n\n    // Security header for content sniffing\n    res.setHeader('X-Content-Type-Options', 'nosniff')\n\n    // html\n    if (type === 'html') {\n      var isInspect = !err.stack && String(err) === toString.call(err)\n      var errorHtml = !isInspect\n        ? escapeHtmlBlock(str.split('\\n', 1)[0] || 'Error')\n        : 'Error'\n      var stack = !isInspect\n        ? String(str).split('\\n').slice(1)\n        : [str]\n      var stackHtml = stack\n        .map(function (v) { return '<li>' + escapeHtmlBlock(v) + '</li>' })\n        .join('')\n      var body = TEMPLATE\n        .replace('{style}', STYLESHEET)\n        .replace('{stack}', stackHtml)\n        .replace('{title}', escapeHtml(exports.title))\n        .replace('{statusCode}', res.statusCode)\n        .replace(/\\{error\\}/g, errorHtml)\n      res.setHeader('Content-Type', 'text/html; charset=utf-8')\n      res.end(body)\n    // json\n    } else if (type === 'json') {\n      var error = { message: err.message, stack: err.stack }\n      for (var prop in err) error[prop] = err[prop]\n      var json = JSON.stringify({ error: error }, null, 2)\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(json)\n    // plain text\n    } else {\n      res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n      res.end(str)\n    }\n  }\n}\n\n/**\n * Template title, framework authors may override this value.\n */\n\nexports.title = 'Connect'\n\n/**\n * Escape a block of HTML, preserving whitespace.\n * @api private\n */\n\nfunction escapeHtmlBlock (str) {\n  return escapeHtml(str)\n    .replace(DOUBLE_SPACE_REGEXP, ' &nbsp;')\n    .replace(NEW_LINE_REGEXP, '<br>')\n}\n\n/**\n * Stringify a value.\n * @api private\n */\n\nfunction stringify (val) {\n  var stack = val.stack\n\n  if (stack) {\n    return String(stack)\n  }\n\n  var str = String(val)\n\n  return str === toString.call(val)\n    ? inspect(val)\n    : str\n}\n\n/**\n * Log error to console.\n * @api private\n */\n\nfunction logerror (err, str) {\n  console.error(str || err.stack)\n}\n"]},"metadata":{},"sourceType":"script"}